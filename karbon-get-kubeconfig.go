package main

import (
	"fmt"
   // "encoding/json"
   "encoding/base64"
   "gopkg.in/yaml.v2"
	"github.com/kumarsarath588/karbon/client"
	//mainv3 "github.com/terraform-providers/terraform-provider-nutanix/client/v3"
	"github.com/kumarsarath588/karbon/client/v3"
)

//Config
type Config struct {
	Endpoint string
	Username string
	Password string
	Port     string
	Insecure bool
}

// Client represents the nutanix API client
type Client struct {
	API *v3.Client
}

//AutoGenerated
type AutoGenerated struct {
	APIVersion string `yaml:"apiVersion"`
	Kind       string `yaml:"kind"`
	Clusters   []struct {
		Name    string `yaml:"name"`
		Cluster struct {
			Server                   string `yaml:"server"`
			CertificateAuthorityData string `yaml:"certificate-authority-data"`
		} `yaml:"cluster"`
	} `yaml:"clusters"`
	Users []struct {
		Name string `yaml:"name"`
		User struct {
			Username string `yaml:"username"`
			Password string `yaml:"password"`
		} `yaml:"user"`
	} `yaml:"users"`
	Contexts []struct {
		Context struct {
			Cluster string `yaml:"cluster"`
			User    string `yaml:"user"`
		} `yaml:"context"`
		Name string `yaml:"name"`
	} `yaml:"contexts"`
	CurrentContext string `yaml:"current-context"`
}


// Client ...
func (c *Config) Client() (*Client, error) {

	configCreds := client.Credentials{
		URL:      fmt.Sprintf("%s:%s", c.Endpoint, c.Port),
		Endpoint: c.Endpoint,
		Username: c.Username,
		Password: c.Password,
		Port:     c.Port,
		Insecure: c.Insecure,
	}
	v3, err := v3.NewV3Client(configCreds)
	if err != nil {
		return nil, err
	}
	client := &Client{
		API: v3,
	}

	return client, nil
}

func main() {

	config := &Config{
		Endpoint: "10.46.4.2",
		Username: "admin",
		Password: "Nutanix.123",
		Port:	"7050",
		Insecure: true,
	}

	client, err := config.Client()
	if err != nil {
		fmt.Println(err)
    }
	//meta := &mainv3.DSMetadata{}
	resp, err := (*client).API.V3.GetKarbonClusterKubeconfig("7cf4c665-6c61-4f04-4d56-a7b49d9466b0")
	if err != nil {
		fmt.Println(err)
	}

	//out, err := json.Marshal(resp)
	str := *resp.YmlConfig
	data, err := base64.StdEncoding.DecodeString(str)
	if err != nil {
		fmt.Println(err)
	}
	out := &AutoGenerated{}
	err = yaml.Unmarshal(data, out)
	if err != nil {
		fmt.Println(err)
	}
	//fmt.Printf(data)
	fmt.Printf("%s\n",out.Clusters[0].Cluster.Server)
	fmt.Printf("%s\n",out.Users[0].User.Username)
	fmt.Printf("%s\n",out.Users[0].User.Password)
}
