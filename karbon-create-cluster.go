package main

import (
	"time"
	"fmt"
    "gopkg.in/yaml.v2"
    "encoding/json"
    "encoding/base64"
	"github.com/kumarsarath588/karbon/client"
	mainclient "github.com/terraform-providers/terraform-provider-nutanix/client"
	mainv3 "github.com/terraform-providers/terraform-provider-nutanix/client/v3"
	"github.com/kumarsarath588/karbon/client/v3"
	"github.com/terraform-providers/terraform-provider-nutanix/utils"
)

//Config
type Config struct {
	Endpoint string
	Username string
	Password string
	Port     string
	Insecure bool
}

// Client represents the nutanix API client
type Client struct {
	API *v3.Client
}

type PEClient struct {
	API *mainv3.Client
}

//AutoGenerated
type AutoGenerated struct {
	APIVersion string `yaml:"apiVersion"`
	Kind       string `yaml:"kind"`
	Clusters   []struct {
		Name    string `yaml:"name"`
		Cluster struct {
			Server                   string `yaml:"server"`
			CertificateAuthorityData string `yaml:"certificate-authority-data"`
		} `yaml:"cluster"`
	} `yaml:"clusters"`
	Users []struct {
		Name string `yaml:"name"`
		User struct {
			Username string `yaml:"username"`
			Password string `yaml:"password"`
		} `yaml:"user"`
	} `yaml:"users"`
	Contexts []struct {
		Context struct {
			Cluster string `yaml:"cluster"`
			User    string `yaml:"user"`
		} `yaml:"context"`
		Name string `yaml:"name"`
	} `yaml:"contexts"`
	CurrentContext string `yaml:"current-context"`
}

// Client ...
func (c *Config) Client() (*Client, error) {

	configCreds := client.Credentials{
		URL:      fmt.Sprintf("%s:%s", c.Endpoint, c.Port),
		Endpoint: c.Endpoint,
		Username: c.Username,
		Password: c.Password,
		Port:     c.Port,
		Insecure: c.Insecure,
	}
	v3, err := v3.NewV3Client(configCreds)
	if err != nil {
		return nil, err
	}
	client := &Client{
		API: v3,
	}

	return client, nil
}
// Client ...
func (c *Config) PEClient() (*PEClient, error) {

	configCreds := mainclient.Credentials{
		URL:      fmt.Sprintf("%s:%s", c.Endpoint, c.Port),
		Endpoint: c.Endpoint,
		Username: c.Username,
		Password: c.Password,
		Port:     c.Port,
		Insecure: c.Insecure,
	}
	v3, err := mainv3.NewV3Client(configCreds)
	if err != nil {
		return nil, err
	}
	client := &PEClient{
		API: v3,
	}

	return client, nil
}



func main() {

	config := &Config{
		Endpoint: "10.46.4.2",
		Username: "admin",
		Password: "Nutanix.123",
		Port:	"7050",
		Insecure: true,
	}
	peconfig := &Config{
		Endpoint: "10.46.4.2",
		Username: "admin",
		Password: "Nutanix.123",
		Port:	"9440",
		Insecure: true,
	}

	client, err := config.Client()
	if err != nil {
		fmt.Println(err)
    }
	peclient, err := peconfig.PEClient()
	if err != nil {
		fmt.Println(err)
    }

	imgresp, err := (*peclient).API.V3.GetImage("4845223c-8381-43ba-bbb1-915b3be951db")
	if err != nil {
		fmt.Println(err)
    }
	imgout, err := json.Marshal(imgresp)
	if err != nil {
			fmt.Println(err)
	}
	fmt.Printf("%s\n",string(imgout))

	masterNodes := &v3.ResourceConfig{
		Cpu: utils.IntPtr(2),
		MemoryMib: utils.Int64Ptr(4096),
		Image: utils.StringPtr("4845223c-8381-43ba-bbb1-915b3be951db"),
		DiskMib: utils.Int64Ptr(122880),
	}
	workerNodes := &v3.ResourceConfig{
		Cpu: utils.IntPtr(2),
		MemoryMib: utils.Int64Ptr(4096),
		Image: utils.StringPtr("4845223c-8381-43ba-bbb1-915b3be951db"),
		DiskMib: utils.Int64Ptr(122880),
	}
	var masterNodesList []*v3.ResourceConfig
	var workerNodesList []*v3.ResourceConfig
	masterNodesList = append(masterNodesList,masterNodes)
	workerNodesList = append(workerNodesList,workerNodes)
	data := &v3.KarbonClusterIntentInput{
		Name: utils.StringPtr("test-cluster"),
		Description: utils.StringPtr("testing"),
		VmNetwork: utils.StringPtr("5181e6a4-acce-4b16-a1e7-a8a995d20b06"),
		K8sConfig: &v3.K8sConfig{
			ServiceClusterIpRange: utils.StringPtr("172.21.0.0/16"),
			NetworkCidr: utils.StringPtr("172.22.0.0/16"),
			Fqdn: utils.StringPtr(""),
			OsFlavor: utils.StringPtr("centos"),
			NetworkSubnet: utils.IntPtr(24),
			Version: utils.StringPtr("v1.8.13"),
			Workers: workerNodesList,
			Masters: masterNodesList,
		},
		ClusterReference: utils.StringPtr("00057a54-721f-cf3b-2bea-ac1f6b611c80"),
		LoggingConfig: &v3.LoggingConfig{
			EnableAppLogging: utils.BoolPtr(false),
		},
		StorageClassConfig: &v3.StorageClassConfig{
			Metadata: &v3.StorageClassMetadata{
				Name: utils.StringPtr("default-storageclass"),
			},
			Spec: &v3.StorageClassSpec{
				ClusterRef: utils.StringPtr("00057a54-721f-cf3b-2bea-ac1f6b611c80"),
				User: utils.StringPtr("admin"),
				Password: utils.StringPtr("Nutanix123#"),
				StorageContainer: utils.StringPtr("default-container-18623070299451"),
				FileSystem: utils.StringPtr("ext4"),
				FlashMode: utils.BoolPtr(false),
			},
		},
		EtcdConfig: &v3.EtcdConfig{
			NumInstances: utils.IntPtr(1),
			Name: utils.StringPtr("test"),
			ResourceConfig: &v3.ResourceConfig{
				Cpu: utils.IntPtr(2),
				MemoryMib: utils.Int64Ptr(4096),
				Image: utils.StringPtr("4845223c-8381-43ba-bbb1-915b3be951db"),
				DiskMib: utils.Int64Ptr(40960),
			},
		},
	}
	resp, err := (*client).API.V3.CreateKarbonCluster(data)
	if err != nil {
		fmt.Println(err)
	}
	status := "RUNNING"
//	var out []byte
	for status != "SUCCEEDED" {
		taskresp, err := (*client).API.V3.TaskStatus(*resp.TaskUUID)
		if err != nil {
			fmt.Println(err)
		}
/*
		out, err = json.Marshal(taskresp)
		if err != nil {
			fmt.Println(err)
		}
*/
		status = *taskresp.Status
		time.Sleep(10 * time.Second)
		fmt.Printf("Deployment state: %s\n", *taskresp.Status)
	}
	kubeconfigResp, err := (*client).API.V3.GetKarbonClusterKubeconfig(*resp.UUID)
	if err != nil {
		fmt.Println(err)
	}

	str := *kubeconfigResp.YmlConfig
	kubeconfigData, err := base64.StdEncoding.DecodeString(str)
	if err != nil {
		fmt.Println(err)
	}
	kubeconfigOut := &AutoGenerated{}
	err = yaml.Unmarshal(kubeconfigData, kubeconfigOut)
	if err != nil {
		fmt.Println(err)
	}
	//fmt.Printf(kubeconfigData)
	fmt.Printf("%s\n",*resp.UUID)
	fmt.Printf("%s\n",kubeconfigOut.Clusters[0].Cluster.Server)
	fmt.Printf("%s\n",kubeconfigOut.Users[0].User.Username)
	fmt.Printf("%s\n",kubeconfigOut.Users[0].User.Password)

}
